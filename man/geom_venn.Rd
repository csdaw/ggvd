% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_venn.R
\name{geom_venn}
\alias{geom_venn}
\title{Plot a 2-4 way Venn diagram}
\usage{
geom_venn(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  type = "discrete",
  set_name_pos = NULL,
  set_name_colour = NULL,
  set_name_size = 5,
  set_name_face = NULL,
  set_name_family = NULL,
  set_total = FALSE,
  set_total_pos = c(0, -0.15),
  set_total_colour = NULL,
  set_total_size = 4,
  set_total_face = NULL,
  set_total_family = NULL,
  count_colour = "black",
  count_size = 5,
  count_face = NULL,
  count_family = NULL,
  count_nudge = 0.06,
  percentage = TRUE,
  percentage_digits = 1,
  percentage_colour = "black",
  percentage_size = 3,
  percentage_face = NULL,
  percentage_family = NULL,
  percentage_nudge = -count_nudge,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{type}{\code{string}, type of Venn diagram to plot. Either \code{"discrete"}
(the default) or \code{"continuous"}.}

\item{set_name_pos}{Optional. \code{data.frame} with the same nrow as \code{data} and
two columns: \code{x} and \code{y} containing \code{numeric} coordinates to precisely
customise the position of the set name text.}

\item{set_name_colour}{\code{string}, colour of the set name text (default is \code{"black"}).}

\item{set_name_size}{\code{numeric}, size of the set name text (default is \code{5}).}

\item{set_name_face}{\code{string}, font face of set name text (default is \code{"plain"})}

\item{set_name_family}{\code{string}, font family of set name text (default is \code{"sans"})}

\item{set_total}{\code{logical}, should the total number of elements in each set
be shown? (default is \code{FALSE}).}

\item{set_total_pos}{Optional. \code{numeric} of length 2 specifying the precise
position of set total text relative to the center of the set name text
(default is \code{c(0, -0.15)}).}

\item{set_total_colour}{\code{string}, colour of the set total text (default is \code{"black"}).}

\item{set_total_size}{\code{numeric}, size of the set total text (default is \code{3}).}

\item{set_total_face}{\code{string}, font face of set total text (default is \code{"plain"}).}

\item{set_total_family}{\code{string}, font family of set total text (default is \code{"sans"}).}

\item{count_colour}{\code{string}, colour of the segment count text (default is \code{"black"}).}

\item{count_size}{\code{numeric}, size of the segment count text (default is \code{5}).}

\item{count_face}{\code{string}, font face of segment count text (default is \code{"plain"})}

\item{count_family}{\code{string}, font family of segment count text (default is \code{"sans"}).}

\item{count_nudge}{\code{numeric}, amount to nudge segment count text in the y
direction (default is \code{0.06}).}

\item{percentage}{\code{logical}, should the percentage of elements in each
segment be shown? (default is \code{TRUE}).}

\item{percentage_digits}{\code{numeric}, number of decimal places to show in the
percentage text (default is \code{1}).}

\item{percentage_colour}{\code{string}, colour of the percentage text (default is \code{"black"}).}

\item{percentage_size}{\code{numeric}, size of the percentage text (default is \code{3}).}

\item{percentage_face}{\code{string}, font face of percentage text (default is \code{"plain"}).}

\item{percentage_family}{\code{string}, font family of percentage text (default is \code{"sans"}).}

\item{percentage_nudge}{\code{numeric}, amount to nudge percentage text in the y direction
(default is \code{-0.06}).}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\value{
Returns a \emph{layer} ggproto object with \code{geom = GeomVenn}.
}
\description{
Plot a 2-4 way Venn diagram. Use \code{\link{prepare_venn}} to
prepare the input data.frame \code{data} in the correct format.
See \strong{Examples} section below for basic usage instructions.
}
\examples{
library(ggplot2)

# Start with a list of vectors to compare.
# Within each vector, there must not be any duplicated elements.
lst <- list(
  Set1 = c(letters[1:8]),
  Set2 = c(letters[20:26]),
  Set3 = c(letters[8:20])
)

# Use prepare_venn() to convert the list into a data.frame.
# of the correct format. You can add extra columns to the data.frame.
# Here we add a column named fill.
df <- prepare_venn(lst, fill = c("blue", "green", "red"))

# Now we plot a basic Venn diagram
ggplot() +
 geom_venn(aes(set_name = set_name, elements = elements), data = df)

# As this is just a normal ggplot layer we can add whatever we want
# to the plot. Some annotations for example.
ggplot() +
 geom_venn(aes(set_name = set_name, elements = elements), data = df) +
 annotate("curve", x = -1.2, xend = -0.75, y = -0.6, yend = -0.3,
          curvature = 0.3, arrow = arrow(length = unit(2, "mm"))) +
 annotate("text", x = -1.25, y = -0.6, label = "Interesting!", hjust = "right")

# Use theme_void() to get a plain background
ggplot() +
 geom_venn(aes(set_name = set_name, elements = elements), data = df) +
 theme_void()

# Add set totals
ggplot() +
 geom_venn(aes(set_name = set_name, elements = elements),
           data = df, set_total = TRUE) +
 theme_void()

# Remove percentages
ggplot() +
 geom_venn(aes(set_name = set_name, elements = elements),
           data = df, percentage = FALSE, count_nudge = 0) +
 theme_void()

# Add discrete fills to the ellipses
ggplot() +
 geom_venn(aes(set_name = set_name, elements = elements, fill = fill),
           data = df, type = "discrete") +
 theme_void() +
 scale_fill_identity()

# Add continuous fills to the ellipse segments
ggplot() +
 geom_venn(aes(set_name = set_name, elements = elements, fill = count),
           data = df, type = "continuous") +
 theme_void() +
 scale_fill_gradientn(colors = alpha(c("white", "red"), 0.7))

}
